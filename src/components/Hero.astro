---
import { BackgroundImage } from "astro-imagetools/components";

import Logo from "./Logo.astro";
---

<BackgroundImage
  tag="section"
  src="/assets/images/sloghouse.jpeg"
  placeholder="dominantColor"
  attributes={{
    container: {
      id: "hero-section",
      title: "hero-section",
      class: "h-[100dvh] w-screen bg-blend-multiply overflow-hidden",
    },
  }}
>
  <div
    class="flex h-full max-w-8xl flex-col justify-center space-y-8 p-5 text-center sm:text-left md:mx-auto md:pt-28 lg:pt-20"
  >
    <div
      id="logo-spin"
      class="ml-auto flex w-full max-w-xl items-center justify-center"
    >
      <Logo
        className="w-32 mr-12 hidden h-20 sm:block sm:h-36 sm:w-52 md:h-52 md:w-96"
      />
      <div id="circ" class="w-auto animate-spin-slow font-semibold">
        &nbsp; Film . Visual Art . Creative . Content .
      </div>
    </div>
    <h2
      class="hero-text break-words text-3xl uppercase italic md:text-5xl lg:text-7xl"
    >
      We are sloghouse.
    </h2>
    <q
      class="hero-text text-xl text-white md:text-3xl md:leading-normal lg:text-5xl"
      >Unapologetically confident and dynamically adaptable</q
    >
  </div>
</BackgroundImage>

<script>
  import CircleType from "circletype";
  import { animate, stagger } from "motion";

  document.addEventListener("DOMContentLoaded", function () {
    const circ = new CircleType(document.getElementById("circ"));
    circ.raduis(360);
  });

  // animations
  animate(
    "#logo-spin",
    {
      x: [100, 0],
    },
    { duration: 1 }
  );

  const heroTexts = document.querySelectorAll(".hero-text");
  animate(
    heroTexts,
    {
      opacity: [0, 1],
      y: [100, 0],
    },
    {
      duration: 1,
      delay: stagger(0.2),
    }
  );

  const heroSection = document.getElementById("hero-section");
  const images = [
    "/assets/images/sloghouse.jpeg",
    "/assets/images/sloghouse-1.jpeg",
    "/assets/images/sloghouse-2.jpeg",
  ];
  const preloadedImages: HTMLImageElement[] = [];

  // Preload images function
  const preloadImages = (urls: string[], allImages: HTMLImageElement[]) => {
    const promises = urls.map((url) => {
      return new Promise<void>((resolve, reject) => {
        const img = new Image();
        img.src = url;
        img.onload = () => {
          allImages.push(img);
          resolve();
        };
        img.onerror = reject;
      });
    });
    return Promise.all(promises);
  };

  // Start the image preloading
  preloadImages(images, preloadedImages).then(() => {
    const cycleImages = (
      images: HTMLImageElement[],
      container: HTMLElement,
      step: number
    ) => {
      let currentIndex = 0;
      const imageCount = images.length;
      setInterval(() => {
        container.style.backgroundImage = `linear-gradient(rgba(0,0,0, 0.3), rgba(0,0,0, 0.4)), url(${images[currentIndex]?.src})`;
        currentIndex = (currentIndex + 1) % imageCount;
      }, step);
    };

    if (heroSection) {
      cycleImages(preloadedImages, heroSection, 5000);
    }
  });
</script>
